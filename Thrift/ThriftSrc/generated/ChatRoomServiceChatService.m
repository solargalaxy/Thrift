/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TProtocolFactory.h"
#import "TApplicationError.h"
#import "TProtocolError.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TBaseClient.h"

#import "ChatRoomServiceStruct.h"
#import "ChatRoomServiceException.h"

#import "ChatRoomServiceChatService.h"

NSString *ChatRoomServiceChatServiceErrorDomain = @"ChatRoomServiceChatServiceErrorDomain";


@interface ChatRoomServiceChatService_userLogin_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) ChatRoomServiceLoginRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (ChatRoomServiceLoginRequest *) request;

@end

@implementation ChatRoomServiceChatService_userLogin_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (ChatRoomServiceLoginRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChatRoomServiceChatService_userLogin_args class]]) {
    return NO;
  }
  ChatRoomServiceChatService_userLogin_args *other = (ChatRoomServiceChatService_userLogin_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ChatRoomServiceChatService_userLogin_args * val = [ChatRoomServiceChatService_userLogin_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (ChatRoomServiceLoginRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          ChatRoomServiceLoginRequest *fieldValue = [[ChatRoomServiceLoginRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ChatService_userLogin_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatRoomServiceChatService_userLogin_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ChatRoomServiceChatService_userLogin_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) ChatRoomServiceLoginResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (ChatRoomServiceLoginResponse *) success;

@end

@implementation ChatRoomServiceChatService_userLogin_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (ChatRoomServiceLoginResponse *) success
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChatRoomServiceChatService_userLogin_result class]]) {
    return NO;
  }
  ChatRoomServiceChatService_userLogin_result *other = (ChatRoomServiceChatService_userLogin_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ChatRoomServiceChatService_userLogin_result * val = [ChatRoomServiceChatService_userLogin_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  return val;
}

- (void) setSuccess: (ChatRoomServiceLoginResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          ChatRoomServiceLoginResponse *fieldValue = [[ChatRoomServiceLoginResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ChatService_userLogin_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatRoomServiceChatService_userLogin_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ChatRoomServiceChatService_userLogout_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) ChatRoomServiceSessionInfo * session;
@property (assign, nonatomic) BOOL sessionIsSet;
- (void) unsetSession;


- (instancetype) initWithSession: (ChatRoomServiceSessionInfo *) session;

@end

@implementation ChatRoomServiceChatService_userLogout_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSession: (ChatRoomServiceSessionInfo *) session
{
  self = [super init];
  if (self)  {
    _session = session;
    _sessionIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"session"])
    {
      _session = [decoder decodeObjectForKey: @"session"];
      _sessionIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_sessionIsSet)
  {
    [encoder encodeObject: _session forKey: @"session"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _sessionIsSet ? 2654435761 : 0;
  if (_sessionIsSet)
  {
    hash = (hash * 31) ^ [_session hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChatRoomServiceChatService_userLogout_args class]]) {
    return NO;
  }
  ChatRoomServiceChatService_userLogout_args *other = (ChatRoomServiceChatService_userLogout_args *)anObject;
  if ((_sessionIsSet != other->_sessionIsSet) ||
      (_sessionIsSet && ((_session || other->_session) && ![_session isEqual:other->_session]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ChatRoomServiceChatService_userLogout_args * val = [ChatRoomServiceChatService_userLogout_args new];
  if (_sessionIsSet)
  {
    val.session = [self.session copy];
  }
  return val;
}

- (void) setSession: (ChatRoomServiceSessionInfo *) session {
  _session = session;
  _sessionIsSet = YES;
}

- (void) unsetSession {
  _session = nil;
  _sessionIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          ChatRoomServiceSessionInfo *fieldValue = [[ChatRoomServiceSessionInfo alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.session = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ChatService_userLogout_args" error: __thriftError]) return NO;
  if (_sessionIsSet) {
    if (_session != nil) {
      if (![outProtocol writeFieldBeginWithName: @"session" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_session write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatRoomServiceChatService_userLogout_args("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"%@", _session];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ChatRoomServiceChatService_userLogout_result : NSObject <TBase, NSCoding, NSCopying> 



@end

@implementation ChatRoomServiceChatService_userLogout_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChatRoomServiceChatService_userLogout_result class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ChatRoomServiceChatService_userLogout_result * val = [ChatRoomServiceChatService_userLogout_result new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ChatService_userLogout_result" error: __thriftError]) return NO;

  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatRoomServiceChatService_userLogout_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ChatRoomServiceChatService_userRegister_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) ChatRoomServiceRegisterRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (ChatRoomServiceRegisterRequest *) request;

@end

@implementation ChatRoomServiceChatService_userRegister_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (ChatRoomServiceRegisterRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChatRoomServiceChatService_userRegister_args class]]) {
    return NO;
  }
  ChatRoomServiceChatService_userRegister_args *other = (ChatRoomServiceChatService_userRegister_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ChatRoomServiceChatService_userRegister_args * val = [ChatRoomServiceChatService_userRegister_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (ChatRoomServiceRegisterRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          ChatRoomServiceRegisterRequest *fieldValue = [[ChatRoomServiceRegisterRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ChatService_userRegister_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatRoomServiceChatService_userRegister_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ChatRoomServiceChatService_userRegister_result : NSObject <TBase, NSCoding, NSCopying> 

@property (assign, nonatomic) BOOL success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (BOOL) success;

@end

@implementation ChatRoomServiceChatService_userRegister_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (BOOL) success
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeBoolForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeBool: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [@(_success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChatRoomServiceChatService_userRegister_result class]]) {
    return NO;
  }
  ChatRoomServiceChatService_userRegister_result *other = (ChatRoomServiceChatService_userRegister_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && (_success != other->_success))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ChatRoomServiceChatService_userRegister_result * val = [ChatRoomServiceChatService_userRegister_result new];
  if (_successIsSet)
  {
    val.success = self.success;
  }
  return val;
}

- (void) setSuccess: (BOOL) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ChatService_userRegister_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeBOOL fieldID: 0 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _success error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatRoomServiceChatService_userRegister_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ChatRoomServiceChatService_getUserList_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) ChatRoomServiceSessionInfo * session;
@property (assign, nonatomic) BOOL sessionIsSet;
- (void) unsetSession;

@property (strong, nonatomic) ChatRoomServiceGetUserListRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithSession: (ChatRoomServiceSessionInfo *) session request: (ChatRoomServiceGetUserListRequest *) request;

@end

@implementation ChatRoomServiceChatService_getUserList_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSession: (ChatRoomServiceSessionInfo *) session request: (ChatRoomServiceGetUserListRequest *) request
{
  self = [super init];
  if (self)  {
    _session = session;
    _sessionIsSet = YES;
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"session"])
    {
      _session = [decoder decodeObjectForKey: @"session"];
      _sessionIsSet = YES;
    }
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_sessionIsSet)
  {
    [encoder encodeObject: _session forKey: @"session"];
  }
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _sessionIsSet ? 2654435761 : 0;
  if (_sessionIsSet)
  {
    hash = (hash * 31) ^ [_session hash];
  }
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChatRoomServiceChatService_getUserList_args class]]) {
    return NO;
  }
  ChatRoomServiceChatService_getUserList_args *other = (ChatRoomServiceChatService_getUserList_args *)anObject;
  if ((_sessionIsSet != other->_sessionIsSet) ||
      (_sessionIsSet && ((_session || other->_session) && ![_session isEqual:other->_session]))) {
    return NO;
  }
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ChatRoomServiceChatService_getUserList_args * val = [ChatRoomServiceChatService_getUserList_args new];
  if (_sessionIsSet)
  {
    val.session = [self.session copy];
  }
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setSession: (ChatRoomServiceSessionInfo *) session {
  _session = session;
  _sessionIsSet = YES;
}

- (void) unsetSession {
  _session = nil;
  _sessionIsSet = NO;
}

- (void) setRequest: (ChatRoomServiceGetUserListRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          ChatRoomServiceSessionInfo *fieldValue = [[ChatRoomServiceSessionInfo alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.session = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          ChatRoomServiceGetUserListRequest *fieldValue = [[ChatRoomServiceGetUserListRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ChatService_getUserList_args" error: __thriftError]) return NO;
  if (_sessionIsSet) {
    if (_session != nil) {
      if (![outProtocol writeFieldBeginWithName: @"session" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_session write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatRoomServiceChatService_getUserList_args("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"%@", _session];
  [ms appendString: @",request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ChatRoomServiceChatService_getUserList_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSMutableArray<ChatRoomServiceUserInfo *> * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) ChatRoomServiceInvalidSessionException * e;
@property (assign, nonatomic) BOOL eIsSet;
- (void) unsetE;


- (instancetype) initWithSuccess: (NSArray<ChatRoomServiceUserInfo *> *) success e: (ChatRoomServiceInvalidSessionException *) e;

@end

@implementation ChatRoomServiceChatService_getUserList_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (NSArray<ChatRoomServiceUserInfo *> *) success e: (ChatRoomServiceInvalidSessionException *) e
{
  self = [super init];
  if (self)  {
    _success = [success mutableCopy];
    _successIsSet = YES;
    _e = e;
    _eIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"e"])
    {
      _e = [decoder decodeObjectForKey: @"e"];
      _eIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_eIsSet)
  {
    [encoder encodeObject: _e forKey: @"e"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _eIsSet ? 2654435761 : 0;
  if (_eIsSet)
  {
    hash = (hash * 31) ^ [_e hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChatRoomServiceChatService_getUserList_result class]]) {
    return NO;
  }
  ChatRoomServiceChatService_getUserList_result *other = (ChatRoomServiceChatService_getUserList_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_eIsSet != other->_eIsSet) ||
      (_eIsSet && ((_e || other->_e) && ![_e isEqual:other->_e]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ChatRoomServiceChatService_getUserList_result * val = [ChatRoomServiceChatService_getUserList_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_eIsSet)
  {
    val.e = [self.e copy];
  }
  return val;
}

- (void) setSuccess: (NSMutableArray<ChatRoomServiceUserInfo *> *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setE: (ChatRoomServiceInvalidSessionException *) e {
  _e = e;
  _eIsSet = YES;
}

- (void) unsetE {
  _e = nil;
  _eIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeLIST) {
          SInt32 _size0;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size0 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            ChatRoomServiceUserInfo *_elem2 = [[ChatRoomServiceUserInfo alloc] init];
            if (![_elem2 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem2];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          ChatRoomServiceInvalidSessionException *fieldValue = [[ChatRoomServiceInvalidSessionException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.e = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ChatService_getUserList_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeLIST fieldID: 0 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_success count] error: __thriftError]) return NO;
        int idx4;
        for (idx4 = 0; idx4 < [_success count]; idx4++)
        {
          if (![[_success objectAtIndex: idx4] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_eIsSet) {
    if (_e != nil) {
      if (![outProtocol writeFieldBeginWithName: @"e" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_e write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatRoomServiceChatService_getUserList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",e:"];
  [ms appendFormat: @"%@", _e];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ChatRoomServiceChatService_sendMessage_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) ChatRoomServiceSessionInfo * session;
@property (assign, nonatomic) BOOL sessionIsSet;
- (void) unsetSession;

@property (strong, nonatomic) ChatRoomServiceMessageInfo * message;
@property (assign, nonatomic) BOOL messageIsSet;
- (void) unsetMessage;


- (instancetype) initWithSession: (ChatRoomServiceSessionInfo *) session message: (ChatRoomServiceMessageInfo *) message;

@end

@implementation ChatRoomServiceChatService_sendMessage_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSession: (ChatRoomServiceSessionInfo *) session message: (ChatRoomServiceMessageInfo *) message
{
  self = [super init];
  if (self)  {
    _session = session;
    _sessionIsSet = YES;
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"session"])
    {
      _session = [decoder decodeObjectForKey: @"session"];
      _sessionIsSet = YES;
    }
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_sessionIsSet)
  {
    [encoder encodeObject: _session forKey: @"session"];
  }
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _sessionIsSet ? 2654435761 : 0;
  if (_sessionIsSet)
  {
    hash = (hash * 31) ^ [_session hash];
  }
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChatRoomServiceChatService_sendMessage_args class]]) {
    return NO;
  }
  ChatRoomServiceChatService_sendMessage_args *other = (ChatRoomServiceChatService_sendMessage_args *)anObject;
  if ((_sessionIsSet != other->_sessionIsSet) ||
      (_sessionIsSet && ((_session || other->_session) && ![_session isEqual:other->_session]))) {
    return NO;
  }
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ChatRoomServiceChatService_sendMessage_args * val = [ChatRoomServiceChatService_sendMessage_args new];
  if (_sessionIsSet)
  {
    val.session = [self.session copy];
  }
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setSession: (ChatRoomServiceSessionInfo *) session {
  _session = session;
  _sessionIsSet = YES;
}

- (void) unsetSession {
  _session = nil;
  _sessionIsSet = NO;
}

- (void) setMessage: (ChatRoomServiceMessageInfo *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          ChatRoomServiceSessionInfo *fieldValue = [[ChatRoomServiceSessionInfo alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.session = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          ChatRoomServiceMessageInfo *fieldValue = [[ChatRoomServiceMessageInfo alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ChatService_sendMessage_args" error: __thriftError]) return NO;
  if (_sessionIsSet) {
    if (_session != nil) {
      if (![outProtocol writeFieldBeginWithName: @"session" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_session write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_message write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatRoomServiceChatService_sendMessage_args("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"%@", _session];
  [ms appendString: @",message:"];
  [ms appendFormat: @"%@", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ChatRoomServiceChatService_sendMessage_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) ChatRoomServiceSendMessageResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) ChatRoomServiceInvalidSessionException * e;
@property (assign, nonatomic) BOOL eIsSet;
- (void) unsetE;

@property (strong, nonatomic) ChatRoomServiceOperationException * e2;
@property (assign, nonatomic) BOOL e2IsSet;
- (void) unsetE2;


- (instancetype) initWithSuccess: (ChatRoomServiceSendMessageResponse *) success e: (ChatRoomServiceInvalidSessionException *) e e2: (ChatRoomServiceOperationException *) e2;

@end

@implementation ChatRoomServiceChatService_sendMessage_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (ChatRoomServiceSendMessageResponse *) success e: (ChatRoomServiceInvalidSessionException *) e e2: (ChatRoomServiceOperationException *) e2
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _e = e;
    _eIsSet = YES;
    _e2 = e2;
    _e2IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"e"])
    {
      _e = [decoder decodeObjectForKey: @"e"];
      _eIsSet = YES;
    }
    if ([decoder containsValueForKey: @"e2"])
    {
      _e2 = [decoder decodeObjectForKey: @"e2"];
      _e2IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_eIsSet)
  {
    [encoder encodeObject: _e forKey: @"e"];
  }
  if (_e2IsSet)
  {
    [encoder encodeObject: _e2 forKey: @"e2"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _eIsSet ? 2654435761 : 0;
  if (_eIsSet)
  {
    hash = (hash * 31) ^ [_e hash];
  }
  hash = (hash * 31) ^ _e2IsSet ? 2654435761 : 0;
  if (_e2IsSet)
  {
    hash = (hash * 31) ^ [_e2 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChatRoomServiceChatService_sendMessage_result class]]) {
    return NO;
  }
  ChatRoomServiceChatService_sendMessage_result *other = (ChatRoomServiceChatService_sendMessage_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_eIsSet != other->_eIsSet) ||
      (_eIsSet && ((_e || other->_e) && ![_e isEqual:other->_e]))) {
    return NO;
  }
  if ((_e2IsSet != other->_e2IsSet) ||
      (_e2IsSet && ((_e2 || other->_e2) && ![_e2 isEqual:other->_e2]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ChatRoomServiceChatService_sendMessage_result * val = [ChatRoomServiceChatService_sendMessage_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_eIsSet)
  {
    val.e = [self.e copy];
  }
  if (_e2IsSet)
  {
    val.e2 = [self.e2 copy];
  }
  return val;
}

- (void) setSuccess: (ChatRoomServiceSendMessageResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setE: (ChatRoomServiceInvalidSessionException *) e {
  _e = e;
  _eIsSet = YES;
}

- (void) unsetE {
  _e = nil;
  _eIsSet = NO;
}

- (void) setE2: (ChatRoomServiceOperationException *) e2 {
  _e2 = e2;
  _e2IsSet = YES;
}

- (void) unsetE2 {
  _e2 = nil;
  _e2IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          ChatRoomServiceSendMessageResponse *fieldValue = [[ChatRoomServiceSendMessageResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          ChatRoomServiceInvalidSessionException *fieldValue = [[ChatRoomServiceInvalidSessionException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.e = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          ChatRoomServiceOperationException *fieldValue = [[ChatRoomServiceOperationException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.e2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ChatService_sendMessage_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_eIsSet) {
    if (_e != nil) {
      if (![outProtocol writeFieldBeginWithName: @"e" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_e write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_e2IsSet) {
    if (_e2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"e2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_e2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatRoomServiceChatService_sendMessage_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",e:"];
  [ms appendFormat: @"%@", _e];
  [ms appendString: @",e2:"];
  [ms appendFormat: @"%@", _e2];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ChatRoomServiceChatServiceClient () {

  id<TProtocol> inProtocol;
  id<TProtocol> outProtocol;

}

@end

@implementation ChatRoomServiceChatServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  if (self)   {
    inProtocol = anInProtocol;
    outProtocol = anOutProtocol;
  }
  return self;
}

- (BOOL) send_userLogin: (ChatRoomServiceLoginRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"userLogin" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"ChatService_userLogin_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_userLogin: (ChatRoomServiceLoginResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  ChatRoomServiceChatService_userLogin_result * resulter = [ChatRoomServiceChatService_userLogin_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"userLogin"}];
  }
  return NO;
}

- (ChatRoomServiceLoginResponse *) userLogin: (ChatRoomServiceLoginRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_userLogin : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  ChatRoomServiceLoginResponse * __result;
  if (![self recv_userLogin: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_userLogout: (ChatRoomServiceSessionInfo *) session error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"userLogout" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"ChatService_userLogout_args" error: __thriftError]) return NO;
  if (session != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"session" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![session write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_userLogout: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  ChatRoomServiceChatService_userLogout_result * resulter = [ChatRoomServiceChatService_userLogout_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) userLogout: (ChatRoomServiceSessionInfo *) session error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_userLogout : session error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  if (![self recv_userLogout: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_userRegister: (ChatRoomServiceRegisterRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"userRegister" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"ChatService_userRegister_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_userRegister: (BOOL *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  ChatRoomServiceChatService_userRegister_result * resulter = [ChatRoomServiceChatService_userRegister_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"userRegister"}];
  }
  return NO;
}

- (NSNumber *) userRegister: (ChatRoomServiceRegisterRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_userRegister : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  BOOL __result;
  if (![self recv_userRegister: &__result error: __thriftError]) return nil;
  return @(__result);
}

- (BOOL) send_getUserList: (ChatRoomServiceSessionInfo *) session request: (ChatRoomServiceGetUserListRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"getUserList" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"ChatService_getUserList_args" error: __thriftError]) return NO;
  if (session != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"session" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![session write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_getUserList: (NSMutableArray<ChatRoomServiceUserInfo *> * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  ChatRoomServiceChatService_getUserList_result * resulter = [ChatRoomServiceChatService_getUserList_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.eIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter e];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"getUserList"}];
  }
  return NO;
}

- (NSArray<ChatRoomServiceUserInfo *> *) getUserList: (ChatRoomServiceSessionInfo *) session request: (ChatRoomServiceGetUserListRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_getUserList : session request: request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  NSMutableArray<ChatRoomServiceUserInfo *> * __result;
  if (![self recv_getUserList: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_sendMessage: (ChatRoomServiceSessionInfo *) session message: (ChatRoomServiceMessageInfo *) message error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"sendMessage" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"ChatService_sendMessage_args" error: __thriftError]) return NO;
  if (session != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"session" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![session write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (message != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
    if (![message write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_sendMessage: (ChatRoomServiceSendMessageResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  ChatRoomServiceChatService_sendMessage_result * resulter = [ChatRoomServiceChatService_sendMessage_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.eIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter e];
    }
    return NO;
  }
  if (resulter.e2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter e2];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"sendMessage"}];
  }
  return NO;
}

- (ChatRoomServiceSendMessageResponse *) sendMessage: (ChatRoomServiceSessionInfo *) session message: (ChatRoomServiceMessageInfo *) message error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_sendMessage : session message: message error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  ChatRoomServiceSendMessageResponse * __result;
  if (![self recv_sendMessage: &__result error: __thriftError]) return nil;
  return __result;
}

@end

@interface ChatRoomServiceChatServiceProcessor () {
  id <ChatRoomServiceChatService> service;
  NSDictionary * methodMap;
}
@end

@implementation ChatRoomServiceChatServiceProcessor

- (id) initWithChatService: (id <ChatRoomServiceChatService>) aService
{
  self = [super init];
  if (self)   {
    service = aService;
    methodMap = [NSMutableDictionary dictionary];
    {
      SEL s = @selector(process_userLogin_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"userLogin"];
    }
    {
      SEL s = @selector(process_userLogout_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"userLogout"];
    }
    {
      SEL s = @selector(process_userRegister_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"userRegister"];
    }
    {
      SEL s = @selector(process_getUserList_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"getUserList"];
    }
    {
      SEL s = @selector(process_sendMessage_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"sendMessage"];
    }
  }
  return self;
}

- (id<ChatRoomServiceChatService>) service
{
  return service;
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
                          error: (NSError *__autoreleasing *)__thriftError
{
  NSString * messageName;
  SInt32 messageType;
  SInt32 seqID;
  if (![inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID
                                      error: __thriftError]) return NO;
  NSInvocation * invocation = [methodMap valueForKey: messageName];
  if (invocation == nil) {
    if (![TProtocolUtil skipType: TTypeSTRUCT onProtocol: inProtocol error: __thriftError]) return NO;
    if (![inProtocol readMessageEnd: __thriftError]) return NO;
    NSError * x = [NSError errorWithDomain: TApplicationErrorDomain
                                      code: TApplicationErrorUnknownMethod
                                  userInfo: @{TApplicationErrorMethodKey: messageName}];
    if (![outProtocol writeMessageBeginWithName: messageName
                                           type: TMessageTypeEXCEPTION
                                     sequenceID: seqID
                                          error: __thriftError]) return NO;
    if (![x write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeMessageEnd: __thriftError]) return NO;
    if (![[outProtocol transport] flush: __thriftError]) return NO;
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setArgument: &__thriftError atIndex: 5];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (BOOL) process_userLogin_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  ChatRoomServiceChatService_userLogin_args * args = [ChatRoomServiceChatService_userLogin_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  ChatRoomServiceChatService_userLogin_result * result = [ChatRoomServiceChatService_userLogin_result new];
  ChatRoomServiceLoginResponse * serviceResult = [service userLogin: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"userLogin"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_userLogout_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  ChatRoomServiceChatService_userLogout_args * args = [ChatRoomServiceChatService_userLogout_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  ChatRoomServiceChatService_userLogout_result * result = [ChatRoomServiceChatService_userLogout_result new];
  BOOL serviceResult = [service userLogout: [args session] error: __thriftError];
  if (!serviceResult) return NO;
  if (![outProtocol writeMessageBeginWithName: @"userLogout"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_userRegister_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  ChatRoomServiceChatService_userRegister_args * args = [ChatRoomServiceChatService_userRegister_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  ChatRoomServiceChatService_userRegister_result * result = [ChatRoomServiceChatService_userRegister_result new];
  NSNumber * serviceResult = [service userRegister: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: [serviceResult boolValue]];
  if (![outProtocol writeMessageBeginWithName: @"userRegister"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_getUserList_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  ChatRoomServiceChatService_getUserList_args * args = [ChatRoomServiceChatService_getUserList_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  ChatRoomServiceChatService_getUserList_result * result = [ChatRoomServiceChatService_getUserList_result new];
  NSMutableArray<ChatRoomServiceUserInfo *> * serviceResult = (NSMutableArray<ChatRoomServiceUserInfo *> *)[service getUserList: [args session] request: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"getUserList"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_sendMessage_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  ChatRoomServiceChatService_sendMessage_args * args = [ChatRoomServiceChatService_sendMessage_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  ChatRoomServiceChatService_sendMessage_result * result = [ChatRoomServiceChatService_sendMessage_result new];
  ChatRoomServiceSendMessageResponse * serviceResult = [service sendMessage: [args session] message: [args message] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"sendMessage"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}
@end

