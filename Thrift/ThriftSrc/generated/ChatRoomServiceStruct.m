/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TProtocolFactory.h"
#import "TApplicationError.h"
#import "TProtocolError.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TBaseClient.h"


#import "ChatRoomServiceStruct.h"

@implementation ChatRoomServiceSessionInfo

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSessionId: (NSString *) sessionId
{
  self = [super init];
  if (self)  {
    _sessionId = sessionId;
    _sessionIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"sessionId"])
    {
      _sessionId = [decoder decodeObjectForKey: @"sessionId"];
      _sessionIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_sessionIdIsSet)
  {
    [encoder encodeObject: _sessionId forKey: @"sessionId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _sessionIdIsSet ? 2654435761 : 0;
  if (_sessionIdIsSet)
  {
    hash = (hash * 31) ^ [_sessionId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChatRoomServiceSessionInfo class]]) {
    return NO;
  }
  ChatRoomServiceSessionInfo *other = (ChatRoomServiceSessionInfo *)anObject;
  if ((_sessionIdIsSet != other->_sessionIdIsSet) ||
      (_sessionIdIsSet && ((_sessionId || other->_sessionId) && ![_sessionId isEqual:other->_sessionId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ChatRoomServiceSessionInfo * val = [ChatRoomServiceSessionInfo new];
  if (_sessionIdIsSet)
  {
    val.sessionId = [self.sessionId copy];
  }
  return val;
}

- (void) setSessionId: (NSString *) sessionId {
  _sessionId = sessionId;
  _sessionIdIsSet = YES;
}

- (void) unsetSessionId {
  _sessionId = nil;
  _sessionIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.sessionId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"SessionInfo" error: __thriftError]) return NO;
  if (_sessionIdIsSet) {
    if (_sessionId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"sessionId" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _sessionId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_sessionIdIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"sessionId"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatRoomServiceSessionInfo("];
  [ms appendString: @"sessionId:"];
  [ms appendFormat: @"\"%@\"", _sessionId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ChatRoomServiceLoginRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUserName: (NSString *) userName password: (NSString *) password machineCode: (NSString *) machineCode type: (ChatRoomServiceClientType) type
{
  self = [super init];
  if (self)  {
    _userName = userName;
    _userNameIsSet = YES;
    _password = password;
    _passwordIsSet = YES;
    _machineCode = machineCode;
    _machineCodeIsSet = YES;
    _type = type;
    _typeIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userName"])
    {
      _userName = [decoder decodeObjectForKey: @"userName"];
      _userNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"password"])
    {
      _password = [decoder decodeObjectForKey: @"password"];
      _passwordIsSet = YES;
    }
    if ([decoder containsValueForKey: @"machineCode"])
    {
      _machineCode = [decoder decodeObjectForKey: @"machineCode"];
      _machineCodeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"type"])
    {
      _type = [decoder decodeIntForKey: @"type"];
      _typeIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userNameIsSet)
  {
    [encoder encodeObject: _userName forKey: @"userName"];
  }
  if (_passwordIsSet)
  {
    [encoder encodeObject: _password forKey: @"password"];
  }
  if (_machineCodeIsSet)
  {
    [encoder encodeObject: _machineCode forKey: @"machineCode"];
  }
  if (_typeIsSet)
  {
    [encoder encodeInt: _type forKey: @"type"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userNameIsSet ? 2654435761 : 0;
  if (_userNameIsSet)
  {
    hash = (hash * 31) ^ [_userName hash];
  }
  hash = (hash * 31) ^ _passwordIsSet ? 2654435761 : 0;
  if (_passwordIsSet)
  {
    hash = (hash * 31) ^ [_password hash];
  }
  hash = (hash * 31) ^ _machineCodeIsSet ? 2654435761 : 0;
  if (_machineCodeIsSet)
  {
    hash = (hash * 31) ^ [_machineCode hash];
  }
  hash = (hash * 31) ^ _typeIsSet ? 2654435761 : 0;
  if (_typeIsSet)
  {
    hash = (hash * 31) ^ [@(_type) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChatRoomServiceLoginRequest class]]) {
    return NO;
  }
  ChatRoomServiceLoginRequest *other = (ChatRoomServiceLoginRequest *)anObject;
  if ((_userNameIsSet != other->_userNameIsSet) ||
      (_userNameIsSet && ((_userName || other->_userName) && ![_userName isEqual:other->_userName]))) {
    return NO;
  }
  if ((_passwordIsSet != other->_passwordIsSet) ||
      (_passwordIsSet && ((_password || other->_password) && ![_password isEqual:other->_password]))) {
    return NO;
  }
  if ((_machineCodeIsSet != other->_machineCodeIsSet) ||
      (_machineCodeIsSet && ((_machineCode || other->_machineCode) && ![_machineCode isEqual:other->_machineCode]))) {
    return NO;
  }
  if ((_typeIsSet != other->_typeIsSet) ||
      (_typeIsSet && (_type != other->_type))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ChatRoomServiceLoginRequest * val = [ChatRoomServiceLoginRequest new];
  if (_userNameIsSet)
  {
    val.userName = [self.userName copy];
  }
  if (_passwordIsSet)
  {
    val.password = [self.password copy];
  }
  if (_machineCodeIsSet)
  {
    val.machineCode = [self.machineCode copy];
  }
  if (_typeIsSet)
  {
    val.type = self.type;
  }
  return val;
}

- (void) setUserName: (NSString *) userName {
  _userName = userName;
  _userNameIsSet = YES;
}

- (void) unsetUserName {
  _userName = nil;
  _userNameIsSet = NO;
}

- (void) setPassword: (NSString *) password {
  _password = password;
  _passwordIsSet = YES;
}

- (void) unsetPassword {
  _password = nil;
  _passwordIsSet = NO;
}

- (void) setMachineCode: (NSString *) machineCode {
  _machineCode = machineCode;
  _machineCodeIsSet = YES;
}

- (void) unsetMachineCode {
  _machineCode = nil;
  _machineCodeIsSet = NO;
}

- (void) setType: (ChatRoomServiceClientType) type {
  _type = type;
  _typeIsSet = YES;
}

- (void) unsetType {
  _typeIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.userName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.password = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.machineCode = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeI32) {
          ChatRoomServiceClientType fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.type = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"LoginRequest" error: __thriftError]) return NO;
  if (_userNameIsSet) {
    if (_userName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userName" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _userName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_passwordIsSet) {
    if (_password != nil) {
      if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _password error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_machineCodeIsSet) {
    if (_machineCode != nil) {
      if (![outProtocol writeFieldBeginWithName: @"machineCode" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _machineCode error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_typeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"type" type: TTypeI32 fieldID: 4 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _type error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_userNameIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"userName"}];
    }
  }
  if (!_passwordIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"password"}];
    }
  }
  if (!_machineCodeIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"machineCode"}];
    }
  }
  if (!_typeIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"type"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatRoomServiceLoginRequest("];
  [ms appendString: @"userName:"];
  [ms appendFormat: @"\"%@\"", _userName];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", _password];
  [ms appendString: @",machineCode:"];
  [ms appendFormat: @"\"%@\"", _machineCode];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", (int)_type];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ChatRoomServiceLoginResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithIsSuccess: (BOOL) isSuccess displayName: (NSString *) displayName userId: (SInt32) userId sessionId: (NSString *) sessionId errorCode: (ChatRoomServiceErrorCode) errorCode
{
  self = [super init];
  if (self)  {
    _isSuccess = isSuccess;
    _isSuccessIsSet = YES;
    _displayName = displayName;
    _displayNameIsSet = YES;
    _userId = userId;
    _userIdIsSet = YES;
    _sessionId = sessionId;
    _sessionIdIsSet = YES;
    _errorCode = errorCode;
    _errorCodeIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"isSuccess"])
    {
      _isSuccess = [decoder decodeBoolForKey: @"isSuccess"];
      _isSuccessIsSet = YES;
    }
    if ([decoder containsValueForKey: @"displayName"])
    {
      _displayName = [decoder decodeObjectForKey: @"displayName"];
      _displayNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeInt32ForKey: @"userId"];
      _userIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"sessionId"])
    {
      _sessionId = [decoder decodeObjectForKey: @"sessionId"];
      _sessionIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"errorCode"])
    {
      _errorCode = [decoder decodeIntForKey: @"errorCode"];
      _errorCodeIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_isSuccessIsSet)
  {
    [encoder encodeBool: _isSuccess forKey: @"isSuccess"];
  }
  if (_displayNameIsSet)
  {
    [encoder encodeObject: _displayName forKey: @"displayName"];
  }
  if (_userIdIsSet)
  {
    [encoder encodeInt32: _userId forKey: @"userId"];
  }
  if (_sessionIdIsSet)
  {
    [encoder encodeObject: _sessionId forKey: @"sessionId"];
  }
  if (_errorCodeIsSet)
  {
    [encoder encodeInt: _errorCode forKey: @"errorCode"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _isSuccessIsSet ? 2654435761 : 0;
  if (_isSuccessIsSet)
  {
    hash = (hash * 31) ^ [@(_isSuccess) hash];
  }
  hash = (hash * 31) ^ _displayNameIsSet ? 2654435761 : 0;
  if (_displayNameIsSet)
  {
    hash = (hash * 31) ^ [_displayName hash];
  }
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [@(_userId) hash];
  }
  hash = (hash * 31) ^ _sessionIdIsSet ? 2654435761 : 0;
  if (_sessionIdIsSet)
  {
    hash = (hash * 31) ^ [_sessionId hash];
  }
  hash = (hash * 31) ^ _errorCodeIsSet ? 2654435761 : 0;
  if (_errorCodeIsSet)
  {
    hash = (hash * 31) ^ [@(_errorCode) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChatRoomServiceLoginResponse class]]) {
    return NO;
  }
  ChatRoomServiceLoginResponse *other = (ChatRoomServiceLoginResponse *)anObject;
  if ((_isSuccessIsSet != other->_isSuccessIsSet) ||
      (_isSuccessIsSet && (_isSuccess != other->_isSuccess))) {
    return NO;
  }
  if ((_displayNameIsSet != other->_displayNameIsSet) ||
      (_displayNameIsSet && ((_displayName || other->_displayName) && ![_displayName isEqual:other->_displayName]))) {
    return NO;
  }
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && (_userId != other->_userId))) {
    return NO;
  }
  if ((_sessionIdIsSet != other->_sessionIdIsSet) ||
      (_sessionIdIsSet && ((_sessionId || other->_sessionId) && ![_sessionId isEqual:other->_sessionId]))) {
    return NO;
  }
  if ((_errorCodeIsSet != other->_errorCodeIsSet) ||
      (_errorCodeIsSet && (_errorCode != other->_errorCode))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ChatRoomServiceLoginResponse * val = [ChatRoomServiceLoginResponse new];
  if (_isSuccessIsSet)
  {
    val.isSuccess = self.isSuccess;
  }
  if (_displayNameIsSet)
  {
    val.displayName = [self.displayName copy];
  }
  if (_userIdIsSet)
  {
    val.userId = self.userId;
  }
  if (_sessionIdIsSet)
  {
    val.sessionId = [self.sessionId copy];
  }
  if (_errorCodeIsSet)
  {
    val.errorCode = self.errorCode;
  }
  return val;
}

- (void) setIsSuccess: (BOOL) isSuccess {
  _isSuccess = isSuccess;
  _isSuccessIsSet = YES;
}

- (void) unsetIsSuccess {
  _isSuccessIsSet = NO;
}

- (void) setDisplayName: (NSString *) displayName {
  _displayName = displayName;
  _displayNameIsSet = YES;
}

- (void) unsetDisplayName {
  _displayName = nil;
  _displayNameIsSet = NO;
}

- (void) setUserId: (SInt32) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userIdIsSet = NO;
}

- (void) setSessionId: (NSString *) sessionId {
  _sessionId = sessionId;
  _sessionIdIsSet = YES;
}

- (void) unsetSessionId {
  _sessionId = nil;
  _sessionIdIsSet = NO;
}

- (void) setErrorCode: (ChatRoomServiceErrorCode) errorCode {
  _errorCode = errorCode;
  _errorCodeIsSet = YES;
}

- (void) unsetErrorCode {
  _errorCodeIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.isSuccess = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.displayName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.sessionId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeI32) {
          ChatRoomServiceErrorCode fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.errorCode = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"LoginResponse" error: __thriftError]) return NO;
  if (_isSuccessIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"isSuccess" type: TTypeBOOL fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _isSuccess error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_displayNameIsSet) {
    if (_displayName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"displayName" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _displayName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_userIdIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeI32 fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _userId error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_sessionIdIsSet) {
    if (_sessionId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"sessionId" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeString: _sessionId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_errorCodeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"errorCode" type: TTypeI32 fieldID: 5 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _errorCode error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_isSuccessIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"isSuccess"}];
    }
  }
  if (!_displayNameIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"displayName"}];
    }
  }
  if (!_userIdIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"userId"}];
    }
  }
  if (!_sessionIdIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"sessionId"}];
    }
  }
  if (!_errorCodeIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"errorCode"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatRoomServiceLoginResponse("];
  [ms appendString: @"isSuccess:"];
  [ms appendFormat: @"%i", _isSuccess];
  [ms appendString: @",displayName:"];
  [ms appendFormat: @"\"%@\"", _displayName];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"%i", (int)_userId];
  [ms appendString: @",sessionId:"];
  [ms appendFormat: @"\"%@\"", _sessionId];
  [ms appendString: @",errorCode:"];
  [ms appendFormat: @"%i", (int)_errorCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ChatRoomServiceRegisterRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUserName: (NSString *) userName password: (NSString *) password displayName: (NSString *) displayName picture: (NSData *) picture
{
  self = [super init];
  if (self)  {
    _userName = userName;
    _userNameIsSet = YES;
    _password = password;
    _passwordIsSet = YES;
    _displayName = displayName;
    _displayNameIsSet = YES;
    _picture = picture;
    _pictureIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userName"])
    {
      _userName = [decoder decodeObjectForKey: @"userName"];
      _userNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"password"])
    {
      _password = [decoder decodeObjectForKey: @"password"];
      _passwordIsSet = YES;
    }
    if ([decoder containsValueForKey: @"displayName"])
    {
      _displayName = [decoder decodeObjectForKey: @"displayName"];
      _displayNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"picture"])
    {
      _picture = [decoder decodeObjectForKey: @"picture"];
      _pictureIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userNameIsSet)
  {
    [encoder encodeObject: _userName forKey: @"userName"];
  }
  if (_passwordIsSet)
  {
    [encoder encodeObject: _password forKey: @"password"];
  }
  if (_displayNameIsSet)
  {
    [encoder encodeObject: _displayName forKey: @"displayName"];
  }
  if (_pictureIsSet)
  {
    [encoder encodeObject: _picture forKey: @"picture"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userNameIsSet ? 2654435761 : 0;
  if (_userNameIsSet)
  {
    hash = (hash * 31) ^ [_userName hash];
  }
  hash = (hash * 31) ^ _passwordIsSet ? 2654435761 : 0;
  if (_passwordIsSet)
  {
    hash = (hash * 31) ^ [_password hash];
  }
  hash = (hash * 31) ^ _displayNameIsSet ? 2654435761 : 0;
  if (_displayNameIsSet)
  {
    hash = (hash * 31) ^ [_displayName hash];
  }
  hash = (hash * 31) ^ _pictureIsSet ? 2654435761 : 0;
  if (_pictureIsSet)
  {
    hash = (hash * 31) ^ [_picture hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChatRoomServiceRegisterRequest class]]) {
    return NO;
  }
  ChatRoomServiceRegisterRequest *other = (ChatRoomServiceRegisterRequest *)anObject;
  if ((_userNameIsSet != other->_userNameIsSet) ||
      (_userNameIsSet && ((_userName || other->_userName) && ![_userName isEqual:other->_userName]))) {
    return NO;
  }
  if ((_passwordIsSet != other->_passwordIsSet) ||
      (_passwordIsSet && ((_password || other->_password) && ![_password isEqual:other->_password]))) {
    return NO;
  }
  if ((_displayNameIsSet != other->_displayNameIsSet) ||
      (_displayNameIsSet && ((_displayName || other->_displayName) && ![_displayName isEqual:other->_displayName]))) {
    return NO;
  }
  if ((_pictureIsSet != other->_pictureIsSet) ||
      (_pictureIsSet && ((_picture || other->_picture) && ![_picture isEqual:other->_picture]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ChatRoomServiceRegisterRequest * val = [ChatRoomServiceRegisterRequest new];
  if (_userNameIsSet)
  {
    val.userName = [self.userName copy];
  }
  if (_passwordIsSet)
  {
    val.password = [self.password copy];
  }
  if (_displayNameIsSet)
  {
    val.displayName = [self.displayName copy];
  }
  if (_pictureIsSet)
  {
    val.picture = [self.picture copy];
  }
  return val;
}

- (void) setUserName: (NSString *) userName {
  _userName = userName;
  _userNameIsSet = YES;
}

- (void) unsetUserName {
  _userName = nil;
  _userNameIsSet = NO;
}

- (void) setPassword: (NSString *) password {
  _password = password;
  _passwordIsSet = YES;
}

- (void) unsetPassword {
  _password = nil;
  _passwordIsSet = NO;
}

- (void) setDisplayName: (NSString *) displayName {
  _displayName = displayName;
  _displayNameIsSet = YES;
}

- (void) unsetDisplayName {
  _displayName = nil;
  _displayNameIsSet = NO;
}

- (void) setPicture: (NSData *) picture {
  _picture = picture;
  _pictureIsSet = YES;
}

- (void) unsetPicture {
  _picture = nil;
  _pictureIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.userName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.password = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.displayName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.picture = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"RegisterRequest" error: __thriftError]) return NO;
  if (_userNameIsSet) {
    if (_userName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userName" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _userName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_passwordIsSet) {
    if (_password != nil) {
      if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _password error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_displayNameIsSet) {
    if (_displayName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"displayName" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _displayName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_pictureIsSet) {
    if (_picture != nil) {
      if (![outProtocol writeFieldBeginWithName: @"picture" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _picture error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_userNameIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"userName"}];
    }
  }
  if (!_passwordIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"password"}];
    }
  }
  if (!_displayNameIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"displayName"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatRoomServiceRegisterRequest("];
  [ms appendString: @"userName:"];
  [ms appendFormat: @"\"%@\"", _userName];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", _password];
  [ms appendString: @",displayName:"];
  [ms appendFormat: @"\"%@\"", _displayName];
  [ms appendString: @",picture:"];
  [ms appendFormat: @"\"%@\"", _picture];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ChatRoomServiceUserInfo

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUserName: (NSString *) userName displayName: (NSString *) displayName picture: (NSData *) picture userId: (SInt32) userId type: (ChatRoomServiceClientType) type status: (ChatRoomServiceStatusType) status
{
  self = [super init];
  if (self)  {
    _userName = userName;
    _userNameIsSet = YES;
    _displayName = displayName;
    _displayNameIsSet = YES;
    _picture = picture;
    _pictureIsSet = YES;
    _userId = userId;
    _userIdIsSet = YES;
    _type = type;
    _typeIsSet = YES;
    _status = status;
    _statusIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userName"])
    {
      _userName = [decoder decodeObjectForKey: @"userName"];
      _userNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"displayName"])
    {
      _displayName = [decoder decodeObjectForKey: @"displayName"];
      _displayNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"picture"])
    {
      _picture = [decoder decodeObjectForKey: @"picture"];
      _pictureIsSet = YES;
    }
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeInt32ForKey: @"userId"];
      _userIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"type"])
    {
      _type = [decoder decodeIntForKey: @"type"];
      _typeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"status"])
    {
      _status = [decoder decodeIntForKey: @"status"];
      _statusIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userNameIsSet)
  {
    [encoder encodeObject: _userName forKey: @"userName"];
  }
  if (_displayNameIsSet)
  {
    [encoder encodeObject: _displayName forKey: @"displayName"];
  }
  if (_pictureIsSet)
  {
    [encoder encodeObject: _picture forKey: @"picture"];
  }
  if (_userIdIsSet)
  {
    [encoder encodeInt32: _userId forKey: @"userId"];
  }
  if (_typeIsSet)
  {
    [encoder encodeInt: _type forKey: @"type"];
  }
  if (_statusIsSet)
  {
    [encoder encodeInt: _status forKey: @"status"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userNameIsSet ? 2654435761 : 0;
  if (_userNameIsSet)
  {
    hash = (hash * 31) ^ [_userName hash];
  }
  hash = (hash * 31) ^ _displayNameIsSet ? 2654435761 : 0;
  if (_displayNameIsSet)
  {
    hash = (hash * 31) ^ [_displayName hash];
  }
  hash = (hash * 31) ^ _pictureIsSet ? 2654435761 : 0;
  if (_pictureIsSet)
  {
    hash = (hash * 31) ^ [_picture hash];
  }
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [@(_userId) hash];
  }
  hash = (hash * 31) ^ _typeIsSet ? 2654435761 : 0;
  if (_typeIsSet)
  {
    hash = (hash * 31) ^ [@(_type) hash];
  }
  hash = (hash * 31) ^ _statusIsSet ? 2654435761 : 0;
  if (_statusIsSet)
  {
    hash = (hash * 31) ^ [@(_status) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChatRoomServiceUserInfo class]]) {
    return NO;
  }
  ChatRoomServiceUserInfo *other = (ChatRoomServiceUserInfo *)anObject;
  if ((_userNameIsSet != other->_userNameIsSet) ||
      (_userNameIsSet && ((_userName || other->_userName) && ![_userName isEqual:other->_userName]))) {
    return NO;
  }
  if ((_displayNameIsSet != other->_displayNameIsSet) ||
      (_displayNameIsSet && ((_displayName || other->_displayName) && ![_displayName isEqual:other->_displayName]))) {
    return NO;
  }
  if ((_pictureIsSet != other->_pictureIsSet) ||
      (_pictureIsSet && ((_picture || other->_picture) && ![_picture isEqual:other->_picture]))) {
    return NO;
  }
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && (_userId != other->_userId))) {
    return NO;
  }
  if ((_typeIsSet != other->_typeIsSet) ||
      (_typeIsSet && (_type != other->_type))) {
    return NO;
  }
  if ((_statusIsSet != other->_statusIsSet) ||
      (_statusIsSet && (_status != other->_status))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ChatRoomServiceUserInfo * val = [ChatRoomServiceUserInfo new];
  if (_userNameIsSet)
  {
    val.userName = [self.userName copy];
  }
  if (_displayNameIsSet)
  {
    val.displayName = [self.displayName copy];
  }
  if (_pictureIsSet)
  {
    val.picture = [self.picture copy];
  }
  if (_userIdIsSet)
  {
    val.userId = self.userId;
  }
  if (_typeIsSet)
  {
    val.type = self.type;
  }
  if (_statusIsSet)
  {
    val.status = self.status;
  }
  return val;
}

- (void) setUserName: (NSString *) userName {
  _userName = userName;
  _userNameIsSet = YES;
}

- (void) unsetUserName {
  _userName = nil;
  _userNameIsSet = NO;
}

- (void) setDisplayName: (NSString *) displayName {
  _displayName = displayName;
  _displayNameIsSet = YES;
}

- (void) unsetDisplayName {
  _displayName = nil;
  _displayNameIsSet = NO;
}

- (void) setPicture: (NSData *) picture {
  _picture = picture;
  _pictureIsSet = YES;
}

- (void) unsetPicture {
  _picture = nil;
  _pictureIsSet = NO;
}

- (void) setUserId: (SInt32) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userIdIsSet = NO;
}

- (void) setType: (ChatRoomServiceClientType) type {
  _type = type;
  _typeIsSet = YES;
}

- (void) unsetType {
  _typeIsSet = NO;
}

- (void) setStatus: (ChatRoomServiceStatusType) status {
  _status = status;
  _statusIsSet = YES;
}

- (void) unsetStatus {
  _statusIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.userName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.displayName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.picture = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeI32) {
          ChatRoomServiceClientType fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.type = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeI32) {
          ChatRoomServiceStatusType fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.status = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserInfo" error: __thriftError]) return NO;
  if (_userNameIsSet) {
    if (_userName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userName" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _userName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_displayNameIsSet) {
    if (_displayName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"displayName" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _displayName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_pictureIsSet) {
    if (_picture != nil) {
      if (![outProtocol writeFieldBeginWithName: @"picture" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _picture error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_userIdIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeI32 fieldID: 5 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _userId error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_typeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"type" type: TTypeI32 fieldID: 6 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _type error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_statusIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"status" type: TTypeI32 fieldID: 7 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _status error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_userNameIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"userName"}];
    }
  }
  if (!_displayNameIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"displayName"}];
    }
  }
  if (!_userIdIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"userId"}];
    }
  }
  if (!_typeIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"type"}];
    }
  }
  if (!_statusIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"status"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatRoomServiceUserInfo("];
  [ms appendString: @"userName:"];
  [ms appendFormat: @"\"%@\"", _userName];
  [ms appendString: @",displayName:"];
  [ms appendFormat: @"\"%@\"", _displayName];
  [ms appendString: @",picture:"];
  [ms appendFormat: @"\"%@\"", _picture];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"%i", (int)_userId];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", (int)_type];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", (int)_status];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ChatRoomServiceMessageInfo

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSeqNo: (SInt64) seqNo type: (ChatRoomServiceMessageType) type message: (NSString *) message emoji: (NSString *) emoji image: (NSData *) image file: (NSData *) file srcUserId: (SInt32) srcUserId dstUserId: (SInt32) dstUserId isGroupChat: (BOOL) isGroupChat
{
  self = [super init];
  if (self)  {
    _seqNo = seqNo;
    _seqNoIsSet = YES;
    _type = type;
    _typeIsSet = YES;
    _message = message;
    _messageIsSet = YES;
    _emoji = emoji;
    _emojiIsSet = YES;
    _image = image;
    _imageIsSet = YES;
    _file = file;
    _fileIsSet = YES;
    _srcUserId = srcUserId;
    _srcUserIdIsSet = YES;
    _dstUserId = dstUserId;
    _dstUserIdIsSet = YES;
    _isGroupChat = isGroupChat;
    _isGroupChatIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"seqNo"])
    {
      _seqNo = [decoder decodeInt64ForKey: @"seqNo"];
      _seqNoIsSet = YES;
    }
    if ([decoder containsValueForKey: @"type"])
    {
      _type = [decoder decodeIntForKey: @"type"];
      _typeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
    if ([decoder containsValueForKey: @"emoji"])
    {
      _emoji = [decoder decodeObjectForKey: @"emoji"];
      _emojiIsSet = YES;
    }
    if ([decoder containsValueForKey: @"image"])
    {
      _image = [decoder decodeObjectForKey: @"image"];
      _imageIsSet = YES;
    }
    if ([decoder containsValueForKey: @"file"])
    {
      _file = [decoder decodeObjectForKey: @"file"];
      _fileIsSet = YES;
    }
    if ([decoder containsValueForKey: @"srcUserId"])
    {
      _srcUserId = [decoder decodeInt32ForKey: @"srcUserId"];
      _srcUserIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"dstUserId"])
    {
      _dstUserId = [decoder decodeInt32ForKey: @"dstUserId"];
      _dstUserIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"isGroupChat"])
    {
      _isGroupChat = [decoder decodeBoolForKey: @"isGroupChat"];
      _isGroupChatIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_seqNoIsSet)
  {
    [encoder encodeInt64: _seqNo forKey: @"seqNo"];
  }
  if (_typeIsSet)
  {
    [encoder encodeInt: _type forKey: @"type"];
  }
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
  if (_emojiIsSet)
  {
    [encoder encodeObject: _emoji forKey: @"emoji"];
  }
  if (_imageIsSet)
  {
    [encoder encodeObject: _image forKey: @"image"];
  }
  if (_fileIsSet)
  {
    [encoder encodeObject: _file forKey: @"file"];
  }
  if (_srcUserIdIsSet)
  {
    [encoder encodeInt32: _srcUserId forKey: @"srcUserId"];
  }
  if (_dstUserIdIsSet)
  {
    [encoder encodeInt32: _dstUserId forKey: @"dstUserId"];
  }
  if (_isGroupChatIsSet)
  {
    [encoder encodeBool: _isGroupChat forKey: @"isGroupChat"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _seqNoIsSet ? 2654435761 : 0;
  if (_seqNoIsSet)
  {
    hash = (hash * 31) ^ [@(_seqNo) hash];
  }
  hash = (hash * 31) ^ _typeIsSet ? 2654435761 : 0;
  if (_typeIsSet)
  {
    hash = (hash * 31) ^ [@(_type) hash];
  }
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  hash = (hash * 31) ^ _emojiIsSet ? 2654435761 : 0;
  if (_emojiIsSet)
  {
    hash = (hash * 31) ^ [_emoji hash];
  }
  hash = (hash * 31) ^ _imageIsSet ? 2654435761 : 0;
  if (_imageIsSet)
  {
    hash = (hash * 31) ^ [_image hash];
  }
  hash = (hash * 31) ^ _fileIsSet ? 2654435761 : 0;
  if (_fileIsSet)
  {
    hash = (hash * 31) ^ [_file hash];
  }
  hash = (hash * 31) ^ _srcUserIdIsSet ? 2654435761 : 0;
  if (_srcUserIdIsSet)
  {
    hash = (hash * 31) ^ [@(_srcUserId) hash];
  }
  hash = (hash * 31) ^ _dstUserIdIsSet ? 2654435761 : 0;
  if (_dstUserIdIsSet)
  {
    hash = (hash * 31) ^ [@(_dstUserId) hash];
  }
  hash = (hash * 31) ^ _isGroupChatIsSet ? 2654435761 : 0;
  if (_isGroupChatIsSet)
  {
    hash = (hash * 31) ^ [@(_isGroupChat) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChatRoomServiceMessageInfo class]]) {
    return NO;
  }
  ChatRoomServiceMessageInfo *other = (ChatRoomServiceMessageInfo *)anObject;
  if ((_seqNoIsSet != other->_seqNoIsSet) ||
      (_seqNoIsSet && (_seqNo != other->_seqNo))) {
    return NO;
  }
  if ((_typeIsSet != other->_typeIsSet) ||
      (_typeIsSet && (_type != other->_type))) {
    return NO;
  }
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  if ((_emojiIsSet != other->_emojiIsSet) ||
      (_emojiIsSet && ((_emoji || other->_emoji) && ![_emoji isEqual:other->_emoji]))) {
    return NO;
  }
  if ((_imageIsSet != other->_imageIsSet) ||
      (_imageIsSet && ((_image || other->_image) && ![_image isEqual:other->_image]))) {
    return NO;
  }
  if ((_fileIsSet != other->_fileIsSet) ||
      (_fileIsSet && ((_file || other->_file) && ![_file isEqual:other->_file]))) {
    return NO;
  }
  if ((_srcUserIdIsSet != other->_srcUserIdIsSet) ||
      (_srcUserIdIsSet && (_srcUserId != other->_srcUserId))) {
    return NO;
  }
  if ((_dstUserIdIsSet != other->_dstUserIdIsSet) ||
      (_dstUserIdIsSet && (_dstUserId != other->_dstUserId))) {
    return NO;
  }
  if ((_isGroupChatIsSet != other->_isGroupChatIsSet) ||
      (_isGroupChatIsSet && (_isGroupChat != other->_isGroupChat))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ChatRoomServiceMessageInfo * val = [ChatRoomServiceMessageInfo new];
  if (_seqNoIsSet)
  {
    val.seqNo = self.seqNo;
  }
  if (_typeIsSet)
  {
    val.type = self.type;
  }
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  if (_emojiIsSet)
  {
    val.emoji = [self.emoji copy];
  }
  if (_imageIsSet)
  {
    val.image = [self.image copy];
  }
  if (_fileIsSet)
  {
    val.file = [self.file copy];
  }
  if (_srcUserIdIsSet)
  {
    val.srcUserId = self.srcUserId;
  }
  if (_dstUserIdIsSet)
  {
    val.dstUserId = self.dstUserId;
  }
  if (_isGroupChatIsSet)
  {
    val.isGroupChat = self.isGroupChat;
  }
  return val;
}

- (void) setSeqNo: (SInt64) seqNo {
  _seqNo = seqNo;
  _seqNoIsSet = YES;
}

- (void) unsetSeqNo {
  _seqNoIsSet = NO;
}

- (void) setType: (ChatRoomServiceMessageType) type {
  _type = type;
  _typeIsSet = YES;
}

- (void) unsetType {
  _typeIsSet = NO;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (void) setEmoji: (NSString *) emoji {
  _emoji = emoji;
  _emojiIsSet = YES;
}

- (void) unsetEmoji {
  _emoji = nil;
  _emojiIsSet = NO;
}

- (void) setImage: (NSData *) image {
  _image = image;
  _imageIsSet = YES;
}

- (void) unsetImage {
  _image = nil;
  _imageIsSet = NO;
}

- (void) setFile: (NSData *) file {
  _file = file;
  _fileIsSet = YES;
}

- (void) unsetFile {
  _file = nil;
  _fileIsSet = NO;
}

- (void) setSrcUserId: (SInt32) srcUserId {
  _srcUserId = srcUserId;
  _srcUserIdIsSet = YES;
}

- (void) unsetSrcUserId {
  _srcUserIdIsSet = NO;
}

- (void) setDstUserId: (SInt32) dstUserId {
  _dstUserId = dstUserId;
  _dstUserIdIsSet = YES;
}

- (void) unsetDstUserId {
  _dstUserIdIsSet = NO;
}

- (void) setIsGroupChat: (BOOL) isGroupChat {
  _isGroupChat = isGroupChat;
  _isGroupChatIsSet = YES;
}

- (void) unsetIsGroupChat {
  _isGroupChatIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.seqNo = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI32) {
          ChatRoomServiceMessageType fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.type = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.emoji = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.image = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.file = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.srcUserId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.dstUserId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 9:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.isGroupChat = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"MessageInfo" error: __thriftError]) return NO;
  if (_seqNoIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"seqNo" type: TTypeI64 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _seqNo error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_typeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"type" type: TTypeI32 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _type error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_emojiIsSet) {
    if (_emoji != nil) {
      if (![outProtocol writeFieldBeginWithName: @"emoji" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeString: _emoji error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_imageIsSet) {
    if (_image != nil) {
      if (![outProtocol writeFieldBeginWithName: @"image" type: TTypeSTRING fieldID: 5 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _image error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_fileIsSet) {
    if (_file != nil) {
      if (![outProtocol writeFieldBeginWithName: @"file" type: TTypeSTRING fieldID: 6 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _file error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_srcUserIdIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"srcUserId" type: TTypeI32 fieldID: 7 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _srcUserId error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_dstUserIdIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"dstUserId" type: TTypeI32 fieldID: 8 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _dstUserId error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_isGroupChatIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"isGroupChat" type: TTypeBOOL fieldID: 9 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _isGroupChat error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_seqNoIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"seqNo"}];
    }
  }
  if (!_typeIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"type"}];
    }
  }
  if (!_srcUserIdIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"srcUserId"}];
    }
  }
  if (!_dstUserIdIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"dstUserId"}];
    }
  }
  if (!_isGroupChatIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"isGroupChat"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatRoomServiceMessageInfo("];
  [ms appendString: @"seqNo:"];
  [ms appendFormat: @"%qi", _seqNo];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", (int)_type];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @",emoji:"];
  [ms appendFormat: @"\"%@\"", _emoji];
  [ms appendString: @",image:"];
  [ms appendFormat: @"\"%@\"", _image];
  [ms appendString: @",file:"];
  [ms appendFormat: @"\"%@\"", _file];
  [ms appendString: @",srcUserId:"];
  [ms appendFormat: @"%i", (int)_srcUserId];
  [ms appendString: @",dstUserId:"];
  [ms appendFormat: @"%i", (int)_dstUserId];
  [ms appendString: @",isGroupChat:"];
  [ms appendFormat: @"%i", _isGroupChat];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ChatRoomServiceGetUserListRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUserId: (SInt32) userId userName: (NSString *) userName displayName: (NSString *) displayName type: (ChatRoomServiceClientType) type status: (ChatRoomServiceStatusType) status
{
  self = [super init];
  if (self)  {
    _userId = userId;
    _userIdIsSet = YES;
    _userName = userName;
    _userNameIsSet = YES;
    _displayName = displayName;
    _displayNameIsSet = YES;
    _type = type;
    _typeIsSet = YES;
    _status = status;
    _statusIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeInt32ForKey: @"userId"];
      _userIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"userName"])
    {
      _userName = [decoder decodeObjectForKey: @"userName"];
      _userNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"displayName"])
    {
      _displayName = [decoder decodeObjectForKey: @"displayName"];
      _displayNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"type"])
    {
      _type = [decoder decodeIntForKey: @"type"];
      _typeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"status"])
    {
      _status = [decoder decodeIntForKey: @"status"];
      _statusIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userIdIsSet)
  {
    [encoder encodeInt32: _userId forKey: @"userId"];
  }
  if (_userNameIsSet)
  {
    [encoder encodeObject: _userName forKey: @"userName"];
  }
  if (_displayNameIsSet)
  {
    [encoder encodeObject: _displayName forKey: @"displayName"];
  }
  if (_typeIsSet)
  {
    [encoder encodeInt: _type forKey: @"type"];
  }
  if (_statusIsSet)
  {
    [encoder encodeInt: _status forKey: @"status"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [@(_userId) hash];
  }
  hash = (hash * 31) ^ _userNameIsSet ? 2654435761 : 0;
  if (_userNameIsSet)
  {
    hash = (hash * 31) ^ [_userName hash];
  }
  hash = (hash * 31) ^ _displayNameIsSet ? 2654435761 : 0;
  if (_displayNameIsSet)
  {
    hash = (hash * 31) ^ [_displayName hash];
  }
  hash = (hash * 31) ^ _typeIsSet ? 2654435761 : 0;
  if (_typeIsSet)
  {
    hash = (hash * 31) ^ [@(_type) hash];
  }
  hash = (hash * 31) ^ _statusIsSet ? 2654435761 : 0;
  if (_statusIsSet)
  {
    hash = (hash * 31) ^ [@(_status) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChatRoomServiceGetUserListRequest class]]) {
    return NO;
  }
  ChatRoomServiceGetUserListRequest *other = (ChatRoomServiceGetUserListRequest *)anObject;
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && (_userId != other->_userId))) {
    return NO;
  }
  if ((_userNameIsSet != other->_userNameIsSet) ||
      (_userNameIsSet && ((_userName || other->_userName) && ![_userName isEqual:other->_userName]))) {
    return NO;
  }
  if ((_displayNameIsSet != other->_displayNameIsSet) ||
      (_displayNameIsSet && ((_displayName || other->_displayName) && ![_displayName isEqual:other->_displayName]))) {
    return NO;
  }
  if ((_typeIsSet != other->_typeIsSet) ||
      (_typeIsSet && (_type != other->_type))) {
    return NO;
  }
  if ((_statusIsSet != other->_statusIsSet) ||
      (_statusIsSet && (_status != other->_status))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ChatRoomServiceGetUserListRequest * val = [ChatRoomServiceGetUserListRequest new];
  if (_userIdIsSet)
  {
    val.userId = self.userId;
  }
  if (_userNameIsSet)
  {
    val.userName = [self.userName copy];
  }
  if (_displayNameIsSet)
  {
    val.displayName = [self.displayName copy];
  }
  if (_typeIsSet)
  {
    val.type = self.type;
  }
  if (_statusIsSet)
  {
    val.status = self.status;
  }
  return val;
}

- (void) setUserId: (SInt32) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userIdIsSet = NO;
}

- (void) setUserName: (NSString *) userName {
  _userName = userName;
  _userNameIsSet = YES;
}

- (void) unsetUserName {
  _userName = nil;
  _userNameIsSet = NO;
}

- (void) setDisplayName: (NSString *) displayName {
  _displayName = displayName;
  _displayNameIsSet = YES;
}

- (void) unsetDisplayName {
  _displayName = nil;
  _displayNameIsSet = NO;
}

- (void) setType: (ChatRoomServiceClientType) type {
  _type = type;
  _typeIsSet = YES;
}

- (void) unsetType {
  _typeIsSet = NO;
}

- (void) setStatus: (ChatRoomServiceStatusType) status {
  _status = status;
  _statusIsSet = YES;
}

- (void) unsetStatus {
  _statusIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.userName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.displayName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeI32) {
          ChatRoomServiceClientType fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.type = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeI32) {
          ChatRoomServiceStatusType fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.status = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetUserListRequest" error: __thriftError]) return NO;
  if (_userIdIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeI32 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _userId error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_userNameIsSet) {
    if (_userName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userName" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _userName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_displayNameIsSet) {
    if (_displayName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"displayName" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _displayName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_typeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"type" type: TTypeI32 fieldID: 4 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _type error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_statusIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"status" type: TTypeI32 fieldID: 5 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _status error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatRoomServiceGetUserListRequest("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"%i", (int)_userId];
  [ms appendString: @",userName:"];
  [ms appendFormat: @"\"%@\"", _userName];
  [ms appendString: @",displayName:"];
  [ms appendFormat: @"\"%@\"", _displayName];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", (int)_type];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", (int)_status];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ChatRoomServiceSendMessageResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithErrorCode: (ChatRoomServiceErrorCode) errorCode seqNo: (SInt64) seqNo
{
  self = [super init];
  if (self)  {
    _errorCode = errorCode;
    _errorCodeIsSet = YES;
    _seqNo = seqNo;
    _seqNoIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"errorCode"])
    {
      _errorCode = [decoder decodeIntForKey: @"errorCode"];
      _errorCodeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"seqNo"])
    {
      _seqNo = [decoder decodeInt64ForKey: @"seqNo"];
      _seqNoIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_errorCodeIsSet)
  {
    [encoder encodeInt: _errorCode forKey: @"errorCode"];
  }
  if (_seqNoIsSet)
  {
    [encoder encodeInt64: _seqNo forKey: @"seqNo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _errorCodeIsSet ? 2654435761 : 0;
  if (_errorCodeIsSet)
  {
    hash = (hash * 31) ^ [@(_errorCode) hash];
  }
  hash = (hash * 31) ^ _seqNoIsSet ? 2654435761 : 0;
  if (_seqNoIsSet)
  {
    hash = (hash * 31) ^ [@(_seqNo) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChatRoomServiceSendMessageResponse class]]) {
    return NO;
  }
  ChatRoomServiceSendMessageResponse *other = (ChatRoomServiceSendMessageResponse *)anObject;
  if ((_errorCodeIsSet != other->_errorCodeIsSet) ||
      (_errorCodeIsSet && (_errorCode != other->_errorCode))) {
    return NO;
  }
  if ((_seqNoIsSet != other->_seqNoIsSet) ||
      (_seqNoIsSet && (_seqNo != other->_seqNo))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ChatRoomServiceSendMessageResponse * val = [ChatRoomServiceSendMessageResponse new];
  if (_errorCodeIsSet)
  {
    val.errorCode = self.errorCode;
  }
  if (_seqNoIsSet)
  {
    val.seqNo = self.seqNo;
  }
  return val;
}

- (void) setErrorCode: (ChatRoomServiceErrorCode) errorCode {
  _errorCode = errorCode;
  _errorCodeIsSet = YES;
}

- (void) unsetErrorCode {
  _errorCodeIsSet = NO;
}

- (void) setSeqNo: (SInt64) seqNo {
  _seqNo = seqNo;
  _seqNoIsSet = YES;
}

- (void) unsetSeqNo {
  _seqNoIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI32) {
          ChatRoomServiceErrorCode fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.errorCode = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.seqNo = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"SendMessageResponse" error: __thriftError]) return NO;
  if (_errorCodeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"errorCode" type: TTypeI32 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _errorCode error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_seqNoIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"seqNo" type: TTypeI64 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _seqNo error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_errorCodeIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"errorCode"}];
    }
  }
  if (!_seqNoIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"seqNo"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatRoomServiceSendMessageResponse("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", (int)_errorCode];
  [ms appendString: @",seqNo:"];
  [ms appendFormat: @"%qi", _seqNo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ChatRoomServiceReceiveMessageRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSeqNo: (SInt64) seqNo userId: (SInt32) userId
{
  self = [super init];
  if (self)  {
    _seqNo = seqNo;
    _seqNoIsSet = YES;
    _userId = userId;
    _userIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"seqNo"])
    {
      _seqNo = [decoder decodeInt64ForKey: @"seqNo"];
      _seqNoIsSet = YES;
    }
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeInt32ForKey: @"userId"];
      _userIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_seqNoIsSet)
  {
    [encoder encodeInt64: _seqNo forKey: @"seqNo"];
  }
  if (_userIdIsSet)
  {
    [encoder encodeInt32: _userId forKey: @"userId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _seqNoIsSet ? 2654435761 : 0;
  if (_seqNoIsSet)
  {
    hash = (hash * 31) ^ [@(_seqNo) hash];
  }
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [@(_userId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChatRoomServiceReceiveMessageRequest class]]) {
    return NO;
  }
  ChatRoomServiceReceiveMessageRequest *other = (ChatRoomServiceReceiveMessageRequest *)anObject;
  if ((_seqNoIsSet != other->_seqNoIsSet) ||
      (_seqNoIsSet && (_seqNo != other->_seqNo))) {
    return NO;
  }
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && (_userId != other->_userId))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ChatRoomServiceReceiveMessageRequest * val = [ChatRoomServiceReceiveMessageRequest new];
  if (_seqNoIsSet)
  {
    val.seqNo = self.seqNo;
  }
  if (_userIdIsSet)
  {
    val.userId = self.userId;
  }
  return val;
}

- (void) setSeqNo: (SInt64) seqNo {
  _seqNo = seqNo;
  _seqNoIsSet = YES;
}

- (void) unsetSeqNo {
  _seqNoIsSet = NO;
}

- (void) setUserId: (SInt32) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.seqNo = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ReceiveMessageRequest" error: __thriftError]) return NO;
  if (_seqNoIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"seqNo" type: TTypeI64 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _seqNo error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_userIdIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeI32 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _userId error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatRoomServiceReceiveMessageRequest("];
  [ms appendString: @"seqNo:"];
  [ms appendFormat: @"%qi", _seqNo];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"%i", (int)_userId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

NSString *ChatRoomServiceStructErrorDomain = @"ChatRoomServiceStructErrorDomain";


